{"attributes": {"fullName": "qx.bom.Element", "packageName": "qx.bom", "isStatic": true, "type": "class", "name": "Element"}, "type": "class", "children": [{"attributes": {"text": "<p>This class is mainly a convenience wrapper for <span class=\"caps\">DOM</span> elements to\nqooxdoo&#8217;s event system.</p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"line": 243, "isStatic": true, "name": "activate"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to focus</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Activates the given element. The active element receives all key board events.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {}, "type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"line": 164, "isStatic": true, "name": "addListener"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to attach the event on.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the event e.g. &#8220;click&#8221;, &#8220;keydown&#8221;, ...</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "listener"}, "type": "param", "children": [{"attributes": {"text": "<p>Event listener function</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>Reference to the &#8216;this&#8217; variable inside\n        the event listener. When not given, the corresponding dispatcher\n        usually falls back to a default, which is the target\n        by convention. Note this is not a strict requirement, i.e.\n        custom dispatchers can follow a different strategy.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to attach the event to the\n      capturing phase or the bubbling phase of the event. The default is\n      to attach the event handler to the bubbling phase.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Add an event listener to a <span class=\"caps\">DOM</span> element. The event listener is passed an\ninstance of {@link Event} containing all relevant information\nabout the event as parameter.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>An opaque id, which can be used to remove the event listener\n      using the {@link #removeListenerById} method.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 72, "isStatic": true, "name": "allowCreationWithMarkup"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"defaultValue": "", "name": "win"}, "type": "param", "children": [{"attributes": {"text": "<p>Window to check for</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Window"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "deprecated", "children": [{"attributes": {"text": "<p>since 2.0</p>"}, "type": "desc"}]}, {"attributes": {"text": "<p>Detects if the <span class=\"caps\">DOM</span> support a <code>document.createElement</code> call with a\n<code>String</code> as markup like:</p>\n\n<pre class=\"javascript\">\ndocument.createElement(\"<input type=\"radio\" name=\"RADIOTEST\" value=\"Second Choice\" />\");\n</pre>\n\n<p>Element creation with markup is not standard compatible with Document Object Model (Core) Level 1, but\nInternet Explorer supports it. With an exception that IE9 in IE9 standard mode is standard compatible and\ndoesn&#8217;t support element creation with markup.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<code>true</code> if the DOM supports it, <code>false</code> otherwise."}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 232, "isStatic": true, "name": "blur"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to blur</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Blurs the given element</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {}, "type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"line": 267, "isStatic": true, "name": "capture"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to capture</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "true", "name": "containerCapture"}, "type": "param", "children": [{"attributes": {"text": "<p>If true all events originating in\n  the container are captured. If false events originating in the container\n  are not captured.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Captures the given element</p>"}, "type": "desc"}]}, {"attributes": {"line": 314, "isStatic": true, "name": "clone"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p>Element to clone</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "name": "events"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether events should be copied as well</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Clone given <span class=\"caps\">DOM</span> element. May optionally clone all attached\nevents (recursively) as well.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The copied element</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"line": 107, "isStatic": true, "name": "create"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "name"}, "type": "param", "children": [{"attributes": {"text": "<p>Tag name of the element</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "", "name": "attributes"}, "type": "param", "children": [{"attributes": {"text": "<p>Map of attributes to apply</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "", "name": "win"}, "type": "param", "children": [{"attributes": {"text": "<p>Window to create the element for</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Window"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "deprecated", "children": [{"attributes": {"text": "<p>since 2.0</p>"}, "type": "desc"}]}, {"attributes": {"text": "<p>Creates an <span class=\"caps\">DOM</span> element.</p>\n\n<p>Attributes may be given directly with this call. This is critical\nfor some attributes e.g. name, type, ... in many clients.</p>\n\n<p>Depending on the kind of attributes passed, <code>innerHTML</code> may be\nused internally to assemble the element. Please make sure you understand\nthe security implications. See {@link qx.bom.Html#clean}.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The created element node</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"line": 254, "isStatic": true, "name": "deactivate"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to focus</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Deactivates the given element. The active element receives all key board events.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {}, "type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"line": 130, "isStatic": true, "name": "empty"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p>element to clean</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "deprecated", "children": [{"attributes": {"text": "<p>since 2.0</p>"}, "type": "desc"}]}, {"attributes": {"text": "<p>Removes all content from the given element</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>empty string (new <span class=\"caps\">HTML</span> content)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"line": 221, "isStatic": true, "name": "focus"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to focus</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Focuses the given element. The element needs to have a positive <code>tabIndex</code> value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {}, "type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"line": 84, "isStatic": true, "name": "getHelperElement"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"defaultValue": "", "name": "win"}, "type": "param", "children": [{"attributes": {"text": "<p>Window to create the element for</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Window"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "deprecated", "children": [{"attributes": {"text": "<p>since 2.0</p>"}, "type": "desc"}]}, {"attributes": {"text": "<p>Creates and returns a <span class=\"caps\">DOM</span> helper element.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The created element node</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"line": 210, "isStatic": true, "name": "hasListener"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>The event type</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to check for listeners of\n      the bubbling or of the capturing phase.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Check whether there are one or more listeners for an event type\nregistered at the element.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Whether the element has event listeners of the given type.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 291, "isStatic": true, "name": "matchesSelector"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to test against</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"name": "selector"}, "type": "param", "children": [{"attributes": {"text": "<p>Valid selector (CSS3 + extensions)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {}, "type": "deprecated", "children": [{"attributes": {"text": "<p>since 2.0</p>"}, "type": "desc"}]}, {"attributes": {"text": "<p>Tests if the element matches the selector</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>whether the element can be selected by the selector or not</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 278, "isStatic": true, "name": "releaseCapture"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> element to release</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Releases the given element (from a previous {@link #capture} call)</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {}, "type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"line": 183, "isStatic": true, "name": "removeListener"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "element"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">DOM</span> Element</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"name": "type"}, "type": "param", "children": [{"attributes": {"text": "<p>Name of the event</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "listener"}, "type": "param", "children": [{"attributes": {"text": "<p>The pointer to the event listener</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Function"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "null", "name": "self"}, "type": "param", "children": [{"attributes": {"text": "<p>Reference to the &#8216;this&#8217; variable inside\n        the event listener.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "capture"}, "type": "param", "children": [{"attributes": {"text": "<p>Whether to remove the event listener of\n      the bubbling or of the capturing phase.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Remove an event listener from a from <span class=\"caps\">DOM</span> node.</p>\n\n<p>Note: All registered event listeners will automatically be removed from\n  the <span class=\"caps\">DOM</span> at page unload so it is not necessary to detach events yourself.</p>"}, "type": "desc"}]}, {"attributes": {"line": 195, "isStatic": true, "name": "removeListenerById"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "target"}, "type": "param", "children": [{"attributes": {"text": "<p>The event target</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Object"}, "type": "entry"}]}]}, {"attributes": {"name": "id"}, "type": "param", "children": [{"attributes": {"text": "<p>The id returned by {@link #addListener}</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Removes an event listener from an event target by an id returned by\n{@link #addListener}</p>"}, "type": "desc"}]}]}]}